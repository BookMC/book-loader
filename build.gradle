//file:noinspection GroovyAssignabilityCheck
plugins {
    id "java"
    id "java-library"
    id "maven-publish"
    id "net.kyori.blossom" version "1.2.0"
    id "org.bookmc.buildtools" version "0.3.3+build.15"
    id "com.github.johnrengelman.shadow" version "7.0.0"
}

ext {
    def env = System.getenv()
    buildNumber = env.BUILD_NUMBER
    local = buildNumber == null
    branch = "git rev-parse --abbrev-ref HEAD".execute().text.trim()
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(16)
    }
}

group "org.bookmc"
version "1.0.0${branch != "main" && !branch.isEmpty() ? "-$branch" : ""}+${buildNumber ? "build.$buildNumber" : "local"}"

repositories {
    mavenCentral()
    maven {
        url "https://repo.spongepowered.org/repository/maven-public/"
    }
    maven {
        url "https://maven.bookmc.org"
    }
    maven {
        url "https://maven.fabricmc.net"
    }
    maven {
        url "https://jitpack.io"
    }
}

configurations {
    include
    implementation.extendsFrom(include)
}

sourceSets {
    api {

    }
    shared {
        java {
            runtimeClasspath += sourceSets.api.output
            compileClasspath += sourceSets.api.output
        }
    }
    mixin {

    }
    compatibility {

    }
}

dependencies {
    // Directly in Minecraft
    compileOnly "org.apache.logging.log4j:log4j-api:2.0-beta9"
    compileOnly "org.apache.logging.log4j:log4j-core:2.0-beta9"

    sharedCompileOnly "com.google.code.gson:gson:2.2.4"
    compileOnly "com.google.code.gson:gson:2.2.4"

    mixinCompileOnly sourceSets.api.runtimeClasspath
    mixinCompileOnly "org.apache.logging.log4j:log4j-api:2.0-beta9"
    mixinCompileOnly "org.apache.logging.log4j:log4j-core:2.0-beta9"
    mixinCompileOnly("net.fabricmc:sponge-mixin:0.10.2+mixin.0.8.4") {
        exclude module: "log4j-api"
        exclude module: "log4j-core"
        exclude module: "guava"
        exclude module: "gson"
    }

    include sourceSets.mixin.runtimeClasspath
    include sourceSets.shared.runtimeClasspath
    include sourceSets.compatibility.runtimeClasspath

    apiImplementation "com.google.code.findbugs:jsr305:3.0.2"


    // Shaded libraries
    include("net.fabricmc:sponge-mixin:0.10.2+mixin.0.8.4") {
        exclude module: "log4j-api"
        exclude module: "log4j-core"
        exclude module: "guava"
        exclude module: "gson"
    }

    // Minecraft (1.8.9) bundles an earlier version of Guava
    // so to main compatibility we must shade and relocate it
    include "com.google.guava:guava:30.1.1-jre"

    include "org.ow2.asm:asm:9.2"
    include "org.ow2.asm:asm-tree:9.2"
    include "org.ow2.asm:asm-commons:9.2"
    include "org.ow2.asm:asm-util:9.2"

    sharedImplementation "com.github.zafarkhaja:java-semver:0.9.0"

    testImplementation "junit:junit:4.13.2"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.2.0"
    testRuntimeOnly project(":test")
    configurations.compileOnly.dependencies.forEach(dep -> {
        testRuntimeOnly "${dep.group}:${dep.name}:${dep.version}"
    })
}

test {
    useJUnitPlatform()
}

java {
    withSourcesJar()
    withJavadocJar()
}

blossom {
    replaceToken("%LOADER_VERSION%", project.version)
    replaceToken("%LICENSE%", "LGPL")
}

shadowJar {
    configurations = [project.configurations.include]
    archiveClassifier.set("")
    duplicatesStrategy DuplicatesStrategy.EXCLUDE
    exclude "module-info.class", "LICENSE.*", "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA"

    // Relocate guava
    // Minecraft (1.8.9) bundles an earlier version of Guava & Log4j
    // so to main compatibility we must shade and relocate it
    relocate "com.google.common", "org.bookmc.loader.libs.guava.common"
    relocate "com.google.errorprone", "org.bookmc.loader.libs.guava.errorprone"
    relocate "com.google.j2objc", "org.bookmc.loader.libs.guava.j2objc"
    relocate "com.google.thirdparty", "org.bookmc.loader.libs.guava.thirdparty"
}

tasks.build.dependsOn(tasks.shadowJar)

publishing {
    repositories {
        maven {
            def env = System.getenv()

            boolean isEnvVarsAvailable = env.containsKey("MAVEN_USER") && env.containsKey("MAVEN_PASSWORD")

            if (isEnvVarsAvailable) {
                credentials {
                    username env.get("MAVEN_USER")
                    password env.get("MAVEN_PASSWORD")
                }
            }

            url = local || !isEnvVarsAvailable ? "$buildDir/repository" : "https://maven.bookmc.org/releases/"
        }
    }

    publications {
        //noinspection GroovyAssignabilityCheck
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = "book-loader"
                url = "https://github.com/BookMC/loader"

                developers {
                    developer {
                        name = "ChachyDev"
                    }
                }
            }
        }
    }
}